generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(uuid())
  name            String
  email           String     @unique
  telefone        String
  password        String
  confirmPassword String
  status          Status     @default(PENDENTE)
  role            Role       @default(USUARIO)
  created_At      DateTime   @default(now())
  updated_At      DateTime   @updatedAt
  driver          Driver?
  Product         Product[]
  Order           Order[]
  Address         Address[]
  CartItem        CartItem[]

  @@map("users")
}

model Driver {
  id             String @id @default(uuid())
  driver_license String
  age            Int
  userId         String @unique
  user           User   @relation(fields: [userId], references: [id])

  Car Car[]
}

enum Role {
  USUARIO
  PRODUTOR
  CONDUTOR
}

enum Status {
  ATIVO
  INATIVO
  PENDENTE
  BANIDO
}

model Car {
  id         String   @id @default(uuid())
  model      String
  brand      String
  plate      String   @unique
  driverId   String   @unique
  driver     Driver   @relation(fields: [driverId], references: [id])
  created_At DateTime @default(now())
  updated_At DateTime @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Decimal
  quantity    Int
  imageUrl    String
  imagekey    String
  producerId  String   @unique
  producer    User     @relation(fields: [producerId], references: [id])
  created_At  DateTime @default(now())
  updated_At  DateTime @updatedAt
  categoryId  String   @unique
  category    Category @relation(fields: [categoryId], references: [id])


  Stock Stock?

  CartItem CartItem[]

  OrderItem OrderItem[]
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String
  created_At  DateTime @default(now())
  updated_At  DateTime @updatedAt

  Product Product[]
}

model Stock {
  id         String   @id @default(uuid())
  productId  String   @unique
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  created_At DateTime @default(now())
  updated_At DateTime @updatedAt

  @@map("stocks")
}

model Order {
  id         String      @id @default(uuid())
  userId     String      @unique
  user       User        @relation(fields: [userId], references: [id])
  quantity   Int
  totalPrice Decimal
  status     OrderStatus @default(PENDENTE)
  deliverAt  DateTime?
  addressId  String      @unique
  address    Address     @relation(fields: [addressId], references: [id])
  created_At DateTime    @default(now())
  updated_At DateTime    @updatedAt
  OrderItem OrderItem[]

  @@map("orders")
}

model OrderItem{
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDENTE
  ENTREGUE
  CANCELADO
  PROCESSANDO
}

model Address {
  id        String @id @default(uuid())
  rua       String
  cidade    String
  provincia String
  municipio String
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id])

  Order Order[]
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}
